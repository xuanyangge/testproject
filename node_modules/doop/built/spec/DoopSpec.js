"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var doop_1 = require("../doop");
var Animal = (function () {
    function Animal() {
        this.hasTail(true).legs(2);
    }
    Object.defineProperty(Animal.prototype, "hasFur", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Animal.prototype, "hasTail", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Animal.prototype, "legs", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Animal.prototype, "food", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    Animal.prototype.describe = function () {
        var tail = this.hasTail() ? "a" : "no";
        return "Has " + this.legs() + " legs, " + tail + " tail and likes to eat " + this.food() + ".";
    };
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Animal.prototype, "hasFur", null);
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Animal.prototype, "hasTail", null);
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Animal.prototype, "legs", null);
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Animal.prototype, "food", null);
    Animal = __decorate([
        doop_1.doop, 
        __metadata('design:paramtypes', [])
    ], Animal);
    return Animal;
}());
var Farm = (function () {
    function Farm() {
    }
    Object.defineProperty(Farm.prototype, "owner", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Farm.prototype, "bestPig", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Farm.prototype, "owner", null);
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Farm.prototype, "bestPig", null);
    Farm = __decorate([
        doop_1.doop, 
        __metadata('design:paramtypes', [])
    ], Farm);
    return Farm;
}());
var Piglet = (function (_super) {
    __extends(Piglet, _super);
    function Piglet() {
        _super.call(this);
    }
    Object.defineProperty(Piglet.prototype, "haycorns", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Piglet.prototype, "ofLittleBrain", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    Piglet.prototype.describe = function () {
        return _super.prototype.describe.call(this) + " And is nervous.";
    };
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Piglet.prototype, "haycorns", null);
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Piglet.prototype, "ofLittleBrain", null);
    Piglet = __decorate([
        doop_1.doop, 
        __metadata('design:paramtypes', [])
    ], Piglet);
    return Piglet;
}(Animal));
var Bear = (function (_super) {
    __extends(Bear, _super);
    function Bear(ofLittleBrain) {
        _super.call(this);
        this.hasTail(false);
    }
    Object.defineProperty(Bear.prototype, "ofLittleBrain", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    Bear.prototype.describe = function () {
        return _super.prototype.describe.call(this) + (this.ofLittleBrain()
            ? " And is of very little brain."
            : " And is quite smart.");
    };
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Bear.prototype, "ofLittleBrain", null);
    Bear = __decorate([
        doop_1.doop, 
        __metadata('design:paramtypes', [Boolean])
    ], Bear);
    return Bear;
}(Animal));
var Pooh = (function (_super) {
    __extends(Pooh, _super);
    function Pooh() {
        _super.call(this, true);
    }
    Object.defineProperty(Pooh.prototype, "isHumming", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Pooh.prototype, "isHumming", null);
    Pooh = __decorate([
        doop_1.doop, 
        __metadata('design:paramtypes', [])
    ], Pooh);
    return Pooh;
}(Bear));
var SuperPiglet = (function (_super) {
    __extends(SuperPiglet, _super);
    function SuperPiglet() {
        _super.apply(this, arguments);
    }
    Object.defineProperty(SuperPiglet.prototype, "flying", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], SuperPiglet.prototype, "flying", null);
    SuperPiglet = __decorate([
        doop_1.doop, 
        __metadata('design:paramtypes', [])
    ], SuperPiglet);
    return SuperPiglet;
}(Piglet));
var Empty = (function () {
    function Empty() {
    }
    Empty = __decorate([
        doop_1.doop, 
        __metadata('design:paramtypes', [])
    ], Empty);
    return Empty;
}());
var NoConstructor = (function () {
    function NoConstructor() {
    }
    Object.defineProperty(NoConstructor.prototype, "message", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], NoConstructor.prototype, "message", null);
    NoConstructor = __decorate([
        doop_1.doop, 
        __metadata('design:paramtypes', [])
    ], NoConstructor);
    return NoConstructor;
}());
var Mixed = (function () {
    function Mixed() {
        this.y = 25;
    }
    Object.defineProperty(Mixed.prototype, "x", {
        get: function () { return doop_1.doop(); },
        enumerable: true,
        configurable: true
    });
    __decorate([
        doop_1.doop, 
        __metadata('design:type', Object)
    ], Mixed.prototype, "x", null);
    Mixed = __decorate([
        doop_1.doop, 
        __metadata('design:paramtypes', [])
    ], Mixed);
    return Mixed;
}());
describe("doop", function () {
    it("allows mutation inside constructor", function () {
        var a = new Animal();
        expect(a.hasFur()).toEqual(undefined);
        expect(a.food()).toEqual(undefined);
        expect(a.hasTail()).toEqual(true);
        expect(a.legs()).toEqual(2);
    });
    it("supports inheritance", function () {
        var b = new Bear(false);
        expect(b.hasFur()).toEqual(undefined);
        expect(b.food()).toEqual(undefined);
        expect(b.hasTail()).toEqual(false);
        expect(b.legs()).toEqual(2);
    });
    it("supports multiple levels of inheritance", function () {
        var b = new Pooh();
        expect(b.hasFur()).toEqual(undefined);
        expect(b.food()).toEqual(undefined);
        expect(b.hasTail()).toEqual(false);
        expect(b.legs()).toEqual(2);
        expect(b.isHumming()).toEqual(undefined);
        expect(b.describe()).toEqual("Has 2 legs, no tail and likes to eat undefined. And is quite smart.");
    });
    it("ignores mutation attempt outside constructor", function () {
        var a = new Animal();
        expect(a.legs()).toEqual(2);
        a.legs(4);
        expect(a.legs()).toEqual(2);
        expect(a.describe()).toEqual("Has 2 legs, a tail and likes to eat undefined.");
    });
    it("returns new revisions on set of property", function () {
        var a = new Animal();
        expect(a.legs()).toEqual(2);
        var b = a.legs(4);
        expect(a.legs()).toEqual(2);
        expect(b.legs()).toEqual(4);
        expect(b.describe()).toEqual("Has 4 legs, a tail and likes to eat undefined.");
    });
    it("doesn't muddle up values between properties", function () {
        var p = new Piglet();
        expect(p.hasFur()).toEqual(undefined);
        expect(p.food()).toEqual(undefined);
        expect(p.hasTail()).toEqual(true);
        expect(p.legs()).toEqual(2);
        var p2 = p.hasFur(true).food("Haycorns").hasTail(false).legs(15);
        expect(p.hasFur()).toEqual(undefined);
        expect(p.food()).toEqual(undefined);
        expect(p.hasTail()).toEqual(true);
        expect(p.legs()).toEqual(2);
        expect(p2.hasFur()).toEqual(true);
        expect(p2.food()).toEqual("Haycorns");
        expect(p2.hasTail()).toEqual(false);
        expect(p2.legs()).toEqual(15);
        var p3 = p2.food("Mash").hasTail(true).legs(800);
        expect(p.hasFur()).toEqual(undefined);
        expect(p.food()).toEqual(undefined);
        expect(p.hasTail()).toEqual(true);
        expect(p.legs()).toEqual(2);
        expect(p2.hasFur()).toEqual(true);
        expect(p2.food()).toEqual("Haycorns");
        expect(p2.hasTail()).toEqual(false);
        expect(p2.legs()).toEqual(15);
        expect(p3.hasFur()).toEqual(true);
        expect(p3.food()).toEqual("Mash");
        expect(p3.hasTail()).toEqual(true);
        expect(p3.legs()).toEqual(800);
        expect(p.describe()).toEqual("Has 2 legs, a tail and likes to eat undefined. And is nervous.");
        expect(p2.describe()).toEqual("Has 15 legs, no tail and likes to eat Haycorns. And is nervous.");
        expect(p3.describe()).toEqual("Has 800 legs, a tail and likes to eat Mash. And is nervous.");
    });
    it("tolerates an empty class", function () { return new Empty(); });
    it("tolerates a constructorless class", function () {
        var o = new NoConstructor().message("hi");
        expect(o.message()).toEqual("hi");
    });
    it("doesn't clone any plain instance properties", function () {
        var m = new Mixed();
        expect(m.x()).toEqual(undefined);
        expect(m.y).toEqual(25);
        var m2 = m.x(42);
        expect(m2.x()).toEqual(42);
        expect(m2.y).toEqual(undefined); // instance fields go to undefined
        // original unaffected
        expect(m.x()).toEqual(undefined);
        expect(m.y).toEqual(25);
    });
    it("doesn't confuse properties in same position in peer classes", function () {
        var p = new SuperPiglet().haycorns(32);
        expect(p.haycorns()).toEqual(32);
        var p2 = p.ofLittleBrain(false);
        expect(p2.ofLittleBrain()).toEqual(false);
        expect(p2.haycorns()).toEqual(32);
    });
});
//# sourceMappingURL=DoopSpec.js.map