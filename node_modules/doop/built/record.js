"use strict";
/*
 * Creates a new record with the specified initial field
 * values, with type that combines the fields with the set
 * method.
 */
function record(init) {
    return prototype.set(init);
}
exports.record = record;
/*
 * Implementation of set method. Nothing fancy.
 */
var prototype = {
    set: function (fields) {
        var clone = Object.create(prototype);
        if (this) {
            for (var _i = 0, _a = Object.keys(this); _i < _a.length; _i++) {
                var key = _a[_i];
                clone[key] = this[key];
            }
        }
        for (var _b = 0, _c = Object.keys(fields); _b < _c.length; _b++) {
            var key = _c[_b];
            clone[key] = fields[key];
        }
        return clone;
    }
};
var node = record({ value: false, children: record({}) });
var v1 = node.set({ value: "root" });
var v2 = v1.set({
    children: v1.children.set((_a = {},
        _a["a"] = node.set({ value: "This is A" }),
        _a
    ))
});
var _a;
//# sourceMappingURL=record.js.map